/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
//package chessserver;
import java.rmi.*;
import java.rmi.server.*;
import java.rmi.registry.*;
import java.util.ArrayList;
import javax.swing.JLabel;
//import java.lang.Math.*;
/**
 *
 * @author Amyn
 */
public class board extends javax.swing.JFrame implements ServerInterface{

    /**
     * Creates new form board
     */
    static String bname;
    static board cboard = new board(); 
    boolean click1=false;
    boolean click2=false;
    piece values[][]=new piece[8][8];
    int selectedr;
    int selectedc;
    ArrayList<piece> whitepieces;
    ArrayList<piece> blackpieces;
    int player;
    Location bk;
    Location wk;
    
    private board() {
        
        initComponents();
        player=1;
        whitepieces=new ArrayList<piece>();
        blackpieces=new ArrayList<piece>();
        piece pb1=new pawn("black",new Location(1,0),pawnb1);
        piece pb2=new pawn("black",new Location(1,1),pawnb2);
        piece pb3=new pawn("black",new Location(1,2),pawnb3);
        piece pb4=new pawn("black",new Location(1,3),pawnb4);
        piece pb5=new pawn("black",new Location(1,4),pawnb5);
        piece pb6=new pawn("black",new Location(1,5),pawnb6);
        piece pb7=new pawn("black",new Location(1,6),pawnb7);
        piece pb8=new pawn("black",new Location(1,7),pawnb8);
        
        pawn pw1=new pawn("white",new Location(6,0),pawnw1);
        pawn pw2=new pawn("white",new Location(6,1),pawnw2);
        pawn pw3=new pawn("white",new Location(6,2),pawnw3);
        pawn pw4=new pawn("white",new Location(6,3),pawnw4);
        pawn pw5=new pawn("white",new Location(6,4),pawnw5);
        pawn pw6=new pawn("white",new Location(6,5),pawnw6);
        pawn pw7=new pawn("white",new Location(6,6),pawnw7);
        pawn pw8=new pawn("white",new Location(6,7),pawnw8);
    
        rook rw1=new rook("white",new Location(7,0),rookw1);
        rook rw2=new rook("white",new Location(7,7),rookw2);
    
        rook rb1=new rook("black",new Location(0,0),rookb1);
        rook rb2=new rook("black",new Location(0,7),rookb2);
    
        knight kb1=new knight("black",new Location(0,1),knightb1);
        knight kb2=new knight("black",new Location(0,6),knightb2);
    
        knight kw1=new knight("white",new Location(7,1),knightw1);
        knight kw2=new knight("white",new Location(7,6),knightw2);
    
        bishop bb1=new bishop("black",new Location(0,2),bishopb1);
        bishop bb2=new bishop("black",new Location(0,5),bishopb2);
    
        bishop bw1=new bishop("white",new Location(7,2),bishopw1);
        bishop bw2=new bishop("white",new Location(7,5),bishopw2);
    
        king kb=new king("black",new Location(0,3),kingb);
    
        king kw=new king("white",new Location(7,3),kingw);
    
        queen qb=new queen("black",new Location(0,4),queenb);
    
        queen qw=new queen("white",new Location(7,4),queenw);
        
        blackpieces.add(pb1);blackpieces.add(pb2);blackpieces.add(pb3);blackpieces.add(pb4);
        blackpieces.add(pb5);blackpieces.add(pb6);blackpieces.add(pb7);blackpieces.add(pb8);
        blackpieces.add(bb1);blackpieces.add(bb2);blackpieces.add(rb1);blackpieces.add(rb2);
        blackpieces.add(kb1);blackpieces.add(kb2);blackpieces.add(qb);blackpieces.add(kb);
        
        whitepieces.add(pw1);whitepieces.add(pw2);whitepieces.add(pw3);whitepieces.add(pw4);
        whitepieces.add(pw5);whitepieces.add(pw6);whitepieces.add(pw7);whitepieces.add(pw8);
        whitepieces.add(bw1);whitepieces.add(bw2);whitepieces.add(rw1);whitepieces.add(rw2);
        whitepieces.add(kw1);whitepieces.add(kw2);whitepieces.add(qw);whitepieces.add(kw);
        
        
        values[1][0]=pb1;values[1][1]=pb2;values[1][2]=pb3;values[1][3]=pb4;
        values[1][4]=pb5;values[1][5]=pb6;values[1][6]=pb7;values[1][7]=pb8;
        values[0][0]=rb1;values[0][1]=kb1;values[0][2]=bb1;values[0][3]=kb;
        values[0][4]=qb;values[0][5]=bb2;values[0][6]=kb2;values[0][7]=rb2;
        
        values[6][0]=pw1;values[6][1]=pw2;values[6][2]=pw3;values[6][3]=pw4;
        values[6][4]=pw5;values[6][5]=pw6;values[6][6]=pw7;values[6][7]=pw8;
        values[7][0]=rw1;values[7][1]=kw1;values[7][2]=bw1;values[7][3]=kw;
        values[7][4]=qw;values[7][5]=bw2;values[7][6]=kw2;values[7][7]=rw2;
        
        bk=new Location(0,3);
        wk=new Location(7,3);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pawnb1 = new javax.swing.JLabel();
        pawnb2 = new javax.swing.JLabel();
        pawnb3 = new javax.swing.JLabel();
        pawnb4 = new javax.swing.JLabel();
        pawnb5 = new javax.swing.JLabel();
        pawnb6 = new javax.swing.JLabel();
        pawnb7 = new javax.swing.JLabel();
        pawnb8 = new javax.swing.JLabel();
        pawnw1 = new javax.swing.JLabel();
        pawnw2 = new javax.swing.JLabel();
        pawnw3 = new javax.swing.JLabel();
        pawnw4 = new javax.swing.JLabel();
        pawnw5 = new javax.swing.JLabel();
        pawnw6 = new javax.swing.JLabel();
        pawnw7 = new javax.swing.JLabel();
        pawnw8 = new javax.swing.JLabel();
        rookw1 = new javax.swing.JLabel();
        knightw1 = new javax.swing.JLabel();
        bishopw1 = new javax.swing.JLabel();
        queenw = new javax.swing.JLabel();
        kingw = new javax.swing.JLabel();
        bishopw2 = new javax.swing.JLabel();
        knightw2 = new javax.swing.JLabel();
        rookw2 = new javax.swing.JLabel();
        rookb1 = new javax.swing.JLabel();
        knightb1 = new javax.swing.JLabel();
        bishopb1 = new javax.swing.JLabel();
        queenb = new javax.swing.JLabel();
        kingb = new javax.swing.JLabel();
        bishopb2 = new javax.swing.JLabel();
        knightb2 = new javax.swing.JLabel();
        rookb2 = new javax.swing.JLabel();
        select = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        chessboard = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chess");
        setAlwaysOnTop(true);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.white);
        setMaximumSize(new java.awt.Dimension(456, 490));
        setMinimumSize(new java.awt.Dimension(456, 490));
        setPreferredSize(new java.awt.Dimension(456, 490));
        getContentPane().setLayout(null);

        pawnb1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnBlack.png"))); // NOI18N
        getContentPane().add(pawnb1);
        pawnb1.setBounds(0, 57, 57, 57);

        pawnb2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnBlack.png"))); // NOI18N
        getContentPane().add(pawnb2);
        pawnb2.setBounds(57, 57, 57, 57);

        pawnb3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnBlack.png"))); // NOI18N
        getContentPane().add(pawnb3);
        pawnb3.setBounds(114, 57, 57, 57);

        pawnb4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnBlack.png"))); // NOI18N
        getContentPane().add(pawnb4);
        pawnb4.setBounds(171, 57, 57, 57);

        pawnb5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnBlack.png"))); // NOI18N
        getContentPane().add(pawnb5);
        pawnb5.setBounds(228, 57, 57, 57);

        pawnb6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnBlack.png"))); // NOI18N
        getContentPane().add(pawnb6);
        pawnb6.setBounds(285, 57, 57, 57);

        pawnb7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnBlack.png"))); // NOI18N
        getContentPane().add(pawnb7);
        pawnb7.setBounds(342, 57, 57, 57);

        pawnb8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnBlack.png"))); // NOI18N
        getContentPane().add(pawnb8);
        pawnb8.setBounds(399, 57, 57, 57);

        pawnw1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnWhite.png"))); // NOI18N
        getContentPane().add(pawnw1);
        pawnw1.setBounds(0, 342, 57, 57);

        pawnw2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnWhite.png"))); // NOI18N
        getContentPane().add(pawnw2);
        pawnw2.setBounds(57, 342, 57, 57);

        pawnw3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnWhite.png"))); // NOI18N
        getContentPane().add(pawnw3);
        pawnw3.setBounds(114, 342, 57, 57);

        pawnw4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnWhite.png"))); // NOI18N
        getContentPane().add(pawnw4);
        pawnw4.setBounds(171, 342, 57, 57);

        pawnw5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnWhite.png"))); // NOI18N
        getContentPane().add(pawnw5);
        pawnw5.setBounds(228, 342, 57, 57);

        pawnw6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnWhite.png"))); // NOI18N
        getContentPane().add(pawnw6);
        pawnw6.setBounds(285, 342, 57, 57);

        pawnw7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnWhite.png"))); // NOI18N
        getContentPane().add(pawnw7);
        pawnw7.setBounds(342, 342, 57, 57);

        pawnw8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/PawnWhite.png"))); // NOI18N
        getContentPane().add(pawnw8);
        pawnw8.setBounds(399, 342, 57, 57);

        rookw1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/RookWhite.png"))); // NOI18N
        getContentPane().add(rookw1);
        rookw1.setBounds(0, 399, 57, 57);

        knightw1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/KnightWhite.png"))); // NOI18N
        getContentPane().add(knightw1);
        knightw1.setBounds(57, 399, 57, 57);

        bishopw1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/BishopWhite.png"))); // NOI18N
        getContentPane().add(bishopw1);
        bishopw1.setBounds(114, 399, 57, 57);

        queenw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/QueenWhite.png"))); // NOI18N
        getContentPane().add(queenw);
        queenw.setBounds(171, 399, 57, 57);

        kingw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/KingWhite.png"))); // NOI18N
        getContentPane().add(kingw);
        kingw.setBounds(228, 399, 57, 57);

        bishopw2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/BishopWhite.png"))); // NOI18N
        getContentPane().add(bishopw2);
        bishopw2.setBounds(285, 399, 57, 57);

        knightw2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/KnightWhite.png"))); // NOI18N
        getContentPane().add(knightw2);
        knightw2.setBounds(342, 399, 57, 57);

        rookw2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/RookWhite.png"))); // NOI18N
        getContentPane().add(rookw2);
        rookw2.setBounds(399, 399, 57, 57);

        rookb1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/RookBlack.png"))); // NOI18N
        getContentPane().add(rookb1);
        rookb1.setBounds(0, 0, 57, 57);

        knightb1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/KnightBlack.png"))); // NOI18N
        getContentPane().add(knightb1);
        knightb1.setBounds(57, 0, 57, 57);

        bishopb1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/BishopBlack.png"))); // NOI18N
        getContentPane().add(bishopb1);
        bishopb1.setBounds(114, 0, 57, 57);

        queenb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/QueenBlack.png"))); // NOI18N
        getContentPane().add(queenb);
        queenb.setBounds(171, 0, 57, 57);

        kingb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/KnightBlack.png"))); // NOI18N
        getContentPane().add(kingb);
        kingb.setBounds(228, 0, 57, 57);

        bishopb2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/BishopBlack.png"))); // NOI18N
        getContentPane().add(bishopb2);
        bishopb2.setBounds(285, 0, 57, 57);

        knightb2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/KnightBlack.png"))); // NOI18N
        getContentPane().add(knightb2);
        knightb2.setBounds(342, 0, 57, 57);

        rookb2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/RookBlack.png"))); // NOI18N
        getContentPane().add(rookb2);
        rookb2.setBounds(400, 0, 57, 57);

        select.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0), 3));
        select.setMaximumSize(new java.awt.Dimension(57, 57));
        select.setMinimumSize(new java.awt.Dimension(57, 57));
        select.setPreferredSize(new java.awt.Dimension(57, 57));
        getContentPane().add(select);
        select.setBounds(470, 210, 57, 57);

        jLabel34.setText("jLabel34");
        getContentPane().add(jLabel34);
        jLabel34.setBounds(490, 120, 100, 14);

        chessboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chessserver/resources/cboard.jpg"))); // NOI18N
        chessboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chessboardMouseClicked(evt);
            }
        });
        getContentPane().add(chessboard);
        chessboard.setBounds(0, 0, 460, 456);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chessboardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chessboardMouseClicked
        // TODO add your handling code here:

        //int x=temp2.getAlignmentX();
        int x=evt.getX();
        int y=evt.getY();
        String ax=Integer.toString(x);
        jLabel34.setText("clicked "+ax);
        Double c=(Math.ceil(x/57));
        Double r=(Math.ceil(y/57));
        int row=r.intValue();
        int column=c.intValue();
        //System.out.println(row+" "+column);
        
        if (click1==false && values[row][column]!=null){
            //System.out.println("fist condition");
            if ((values[row][column].isBlack() && player==2) || (values[row][column].isWhite() && player==1)){
                click1=true;
                select.setVisible(true);
                select.setLocation(column*57,row*57);
                selectedr=row;
                selectedc=column;                
            }

        }
        else if (click1==true && (selectedr!=row || selectedc!=column)){//) && values[row][column]==null){
            String type=values[selectedr][selectedc].getType();
            //if ((values[selectedr][selectedc].isWhite() && values[selectedr][selectedc].hasCheckOnOpposingKing(wk))|| (values[selectedr][selectedc].isBlack() && values[selectedr][selectedc].hasCheckOnOpposingKing(bk))) {
            //    System.out.println("Check");
            //}
            if (1==2){
                
            }
            else if ("pawn".equals(type)){
                if (((pawn)(values[selectedr][selectedc])).validateMove(new Location(row,column))){
                    if (values[row][column]!=null){
                        values[row][column].kill(values[selectedr][selectedc]);
                    }
                    values[selectedr][selectedc].makeMove(new Location(row,column));
                    values[row][column]=values[selectedr][selectedc];
                    values[selectedr][selectedc]=null;
                    if (player==1){//white
                        if (row==0){//promotion
                            System.out.println("white promotion");
                            javax.swing.JLabel queenwn=new javax.swing.JLabel();
                            queen newqw=new queen("white",new Location(row,column),queenwn); 
                            values[row][column].kill(newqw);
                            values[row][column]=newqw;
                            whitepieces.add(newqw);
                            getContentPane().add(queenwn);
                            int order=getContentPane().getComponentZOrder(queenwn);
                            getContentPane().setComponentZOrder(queenwn,order-1);
                            getContentPane().setComponentZOrder(chessboard,order);
                        }
                        player=2;
                    }
                    else{
                       if (row==7){//promotion
                            System.out.println("black promotion");
                            javax.swing.JLabel queenbn=new javax.swing.JLabel();
                            queen newqb=new queen("black",new Location(row,column),queenbn); 
                            values[row][column].kill(newqb);
                            values[row][column]=newqb;
                            whitepieces.add(newqb);
                            getContentPane().add(queenbn);
                            int order=getContentPane().getComponentZOrder(queenbn);
                            getContentPane().setComponentZOrder(queenbn,order-1);
                            getContentPane().setComponentZOrder(chessboard,order);
                        }
                        player=1;
                    }
                }
            }
            else if ("rook".equals(type)){
                if (((rook)(values[selectedr][selectedc])).validateMove(new Location(row,column))){
                    boolean checkking=values[selectedr][selectedc].validateMove(new Location(row,column));
                    if (checkking == true){
                        if (values[row][column]==null){ //new box is empty
                            values[row][column]=values[selectedr][selectedc];
                            values[selectedr][selectedc]=null;
                            Location kingpos;
                            if (values[row][column].isWhite()){
                                    kingpos=wk;
                            }
                            else{
                                    kingpos=bk;
                            }
                            if (values[row][column].hasCheckOnOpposingKing(kingpos)){ //invalid move
                                    values[selectedr][selectedc]=values[row][column];
                                    values[row][column]=null;
                            }
                            else{ //valid move
                                    values[row][column].makeMove(new Location(row,column));
                                    if (player==1){
                                        player=2;
                                    }
                                    else{
                                        player=1;
                                    }
                            }
                    }
                    else{ //new box is not empty
                            piece temp=values[row][column];
                            values[row][column]=values[selectedr][selectedc];
                            values[selectedr][selectedc]=null;
                            Location kingpos;
                            //System.out.println("so far correct");
                            if (values[row][column].isWhite()){
                                    kingpos=wk;
                            }
                            else{
                                    kingpos=bk;
                            }
                            if (values[row][column].hasCheckOnOpposingKing(kingpos)){
                                    values[selectedr][selectedc]=values[row][column];
                                    values[row][column]=temp;
                                    //temp=null;
                            }
                            else{
                                    temp.kill(values[row][column]);
                                    values[row][column].makeMove(new Location(row,column));
                                    if (player==1){
                                        player=2;
                                    }
                                    else{
                                        player=1;
                                    }
                            }
                        }
                    }
                }                
            }
            else if ("knight".equals(type)){
                if (((knight)(values[selectedr][selectedc])).validateMove(new Location(row,column))){
                    boolean checkking=values[selectedr][selectedc].validateMove(new Location(row,column));
                    if (checkking == true){
                        if (values[row][column]==null){ //new box is empty
                            values[row][column]=values[selectedr][selectedc];
                            values[selectedr][selectedc]=null;
                            Location kingpos;
                            if (values[row][column].isWhite()){
                                    kingpos=wk;
                            }
                            else{
                                    kingpos=bk;
                            }
                            if (values[row][column].hasCheckOnOpposingKing(kingpos)){ //invalid move
                                    values[selectedr][selectedc]=values[row][column];
                                    values[row][column]=null;
                            }
                            else{ //valid move
                                    values[row][column].makeMove(new Location(row,column));
                                    if (player==1){
                                        player=2;
                                    }
                                    else{
                                        player=1;
                                    }
                            }
                    }
                    else{ //new box is not empty
                            piece temp=values[row][column];
                            values[row][column]=values[selectedr][selectedc];
                            values[selectedr][selectedc]=null;
                            Location kingpos;
                            //System.out.println("so far correct");
                            if (values[row][column].isWhite()){
                                    kingpos=wk;
                            }
                            else{
                                    kingpos=bk;
                            }
                            if (values[row][column].hasCheckOnOpposingKing(kingpos)){
                                    values[selectedr][selectedc]=values[row][column];
                                    values[row][column]=temp;
                                    //temp=null;
                            }
                            else{
                                    temp.kill(values[row][column]);
                                    values[row][column].makeMove(new Location(row,column));
                                    if (player==1){
                                        player=2;
                                    }
                                    else{
                                        player=1;
                                    }
                            }
                        }
                    }
                }                
            }
            else if ("bishop".equals(type)){
                if (((bishop)(values[selectedr][selectedc])).validateMove(new Location(row,column))){
                    boolean checkking=values[selectedr][selectedc].validateMove(new Location(row,column));
                    if (checkking == true){
                        if (values[row][column]==null){ //new box is empty
                            values[row][column]=values[selectedr][selectedc];
                            values[selectedr][selectedc]=null;
                            Location kingpos;
                            if (values[row][column].isWhite()){
                                    kingpos=wk;
                            }
                            else{
                                    kingpos=bk;
                            }
                            if (values[row][column].hasCheckOnOpposingKing(kingpos)){ //invalid move
                                    values[selectedr][selectedc]=values[row][column];
                                    values[row][column]=null;
                            }
                            else{ //valid move
                                    values[row][column].makeMove(new Location(row,column));
                                    if (player==1){
                                        player=2;
                                    }
                                    else{
                                        player=1;
                                    }
                            }
                        }
                        else{ //new box is not empty
                            piece temp=values[row][column];
                            values[row][column]=values[selectedr][selectedc];
                            values[selectedr][selectedc]=null;
                            Location kingpos;
                            //System.out.println("so far correct");
                            if (values[row][column].isWhite()){
                                    kingpos=wk;
                            }
                            else{
                                    kingpos=bk;
                            }
                            if (values[row][column].hasCheckOnOpposingKing(kingpos)){
                                    values[selectedr][selectedc]=values[row][column];
                                    values[row][column]=temp;
                                    //temp=null;
                            }
                            else{
                                    temp.kill(values[row][column]);
                                    values[row][column].makeMove(new Location(row,column));
                                    if (player==1){
                                        player=2;
                                    }
                                    else{
                                        player=1;
                                    }
                            }
                        }
                    }
                }                
            }
            else if ("king".equals(type)){
                if (((king)(values[selectedr][selectedc])).validateMove(new Location(row,column))){
                    //System.out.println("updating matrix");
                    if (values[row][column]!=null){
                        values[row][column].kill(values[selectedr][selectedc]);
                    }
                    values[selectedr][selectedc].makeMove(new Location(row,column));
                    values[row][column]=values[selectedr][selectedc];
                    values[selectedr][selectedc]=null;                    
                    if (player==1){
                        wk=new Location(row,column);
                        player=2;
                    }
                    else{
                        bk=new Location(row,column);
                        player=1;
                    }
                }                
            }
            else if ("queen".equals(type)){
                if (((queen)(values[selectedr][selectedc])).validateMove(new Location(row,column))){
                    boolean checkking=values[selectedr][selectedc].validateMove(new Location(row,column));
                    if (checkking == true){
                        if (values[row][column]==null){ //new box is empty
                                values[row][column]=values[selectedr][selectedc];
                                values[selectedr][selectedc]=null;
                                Location kingpos;
                                if (values[row][column].isWhite()){
                                        kingpos=wk;
                                }
                                else{
                                        kingpos=bk;
                                }
                                if (values[row][column].hasCheckOnOpposingKing(kingpos)){ //invalid move
                                        values[selectedr][selectedc]=values[row][column];
                                        values[row][column]=null;
                                }
                                else{ //valid move
                                        values[row][column].makeMove(new Location(row,column));
                                        if (player==1){
                                            player=2;
                                        }
                                        else{
                                            player=1;
                                        }
                                }
                        }
                        else{ //new box is not empty
                                piece temp=values[row][column];
                                values[row][column]=values[selectedr][selectedc];
                                values[selectedr][selectedc]=null;
                                Location kingpos;
                                //System.out.println("so far correct");
                                if (values[row][column].isWhite()){
                                        kingpos=wk;
                                }
                                else{
                                        kingpos=bk;
                                }
                                if (values[row][column].hasCheckOnOpposingKing(kingpos)){
                                        values[selectedr][selectedc]=values[row][column];
                                        values[row][column]=temp;
                                        //temp=null;
                                }
                                else{
                                        temp.kill(values[row][column]);
                                        values[row][column].makeMove(new Location(row,column));
                                        if (player==1){
                                            player=2;
                                        }
                                        else{
                                            player=1;
                                        }
                                }
                        }
                    }
                }                
            }
                click1=false;
                click2=false;
                select.setVisible(false);
                selectedc=0;
                selectedr=0;       
        }
        else{
            click1=false;
            click2=false;
            select.setVisible(false);
            selectedc=0;
            selectedr=0; 
        }
    }//GEN-LAST:event_chessboardMouseClicked
    public static board getInstance(String name){
        if (board.cboard==null){
            board.cboard=new board();
            board.bname=name;
            System.out.println("getting instance");
        }
        return board.cboard;
    }
    public Location getKing(){
        if (player==1){
            return this.wk;
        }
        else{
            return this.bk;
        }
    }
    
    public void setKing(Location loc){
        if (player==1){
            this.wk=loc;
        }
        else{
            this.bk=loc;
        }
    }
    public piece[][] getMatrix(){
        return this.values;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        board cboard=board.getInstance("Chess");
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                board.cboard.setVisible(true);
            }
        });
            try{
                ServerInterface game=new board();
                ServerInterface stub=(ServerInterface)UnicastRemoteObject.exportObject(game,0);
                String name="GameStub";
                Registry registry = LocateRegistry.getRegistry();
                registry.rebind(name, stub);
                System.out.println("Waiting for client to join");            
        }catch(Exception f){
            f.printStackTrace();
            
        }
        }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bishopb1;
    private javax.swing.JLabel bishopb2;
    private javax.swing.JLabel bishopw1;
    private javax.swing.JLabel bishopw2;
    private javax.swing.JLabel chessboard;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel kingb;
    private javax.swing.JLabel kingw;
    private javax.swing.JLabel knightb1;
    private javax.swing.JLabel knightb2;
    private javax.swing.JLabel knightw1;
    private javax.swing.JLabel knightw2;
    private javax.swing.JLabel pawnb1;
    private javax.swing.JLabel pawnb2;
    private javax.swing.JLabel pawnb3;
    private javax.swing.JLabel pawnb4;
    private javax.swing.JLabel pawnb5;
    private javax.swing.JLabel pawnb6;
    private javax.swing.JLabel pawnb7;
    private javax.swing.JLabel pawnb8;
    private javax.swing.JLabel pawnw1;
    private javax.swing.JLabel pawnw2;
    private javax.swing.JLabel pawnw3;
    private javax.swing.JLabel pawnw4;
    private javax.swing.JLabel pawnw5;
    private javax.swing.JLabel pawnw6;
    private javax.swing.JLabel pawnw7;
    private javax.swing.JLabel pawnw8;
    private javax.swing.JLabel queenb;
    private javax.swing.JLabel queenw;
    private javax.swing.JLabel rookb1;
    private javax.swing.JLabel rookb2;
    private javax.swing.JLabel rookw1;
    private javax.swing.JLabel rookw2;
    private javax.swing.JLabel select;
    // End of variables declaration//GEN-END:variables

    @Override
    public void startingServer() {
        System.out.println("Client connected");
    }
    @Override
    public void serverMove(Location ol,Location nl) {
        //System.out.println("Client trying to move");
 //       System.out.println(this.values[ol.getLocationx()][ol.getLocationy()]);
        //System.out.println(this.values[ol.getLocationx()][ol.getLocationy()]);
        this.values[ol.getLocationx()][ol.getLocationy()].makeMove(nl);
        
        this.getContentPane().repaint();
        //System.out.println("Client moved");
    }      
}
